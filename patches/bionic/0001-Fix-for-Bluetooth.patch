From b31364d03b855566dea4b1a53718390237a9e9ca Mon Sep 17 00:00:00 2001
From: lesleyxxx12 <lesleyvanderlee318@gmail.com>
Date: Sun, 10 Apr 2016 09:55:15 +0200
Subject: [PATCH] Fix for Bluetooth

Change-Id: Idc11c193c4a911ef296fd3dcdda8db1b612fa203
---
 libc/Android.mk                                    |   1 +
 libc/SYSCALLS.TXT                                  |   2 +-
 libc/arch-arm/syscalls.mk                          |   2 +-
 .../syscalls/{epoll_create.S => epoll_create1.S}   |   6 +-
 libc/arch-mips/syscalls.mk                         |   2 +-
 .../syscalls/{epoll_create.S => epoll_create1.S}   |  13 +--
 libc/arch-x86/syscalls.mk                          |   2 +-
 .../syscalls/{epoll_create.S => epoll_create1.S}   |   6 +-
 libc/bionic/epoll_create.cpp                       |  33 +++++++
 libc/include/ppoll.h                               |  16 ++++
 libc/include/pthread.h                             |   2 +
 libc/include/sys/epoll.h                           |   3 +
 libc/include/sys/fcntl.h                           | 105 +++++++++++++++++++++
 libc/include/sys/socket.h                          |   4 +
 14 files changed, 181 insertions(+), 16 deletions(-)
 rename libc/arch-arm/syscalls/{epoll_create.S => epoll_create1.S} (77%)
 rename libc/arch-mips/syscalls/{epoll_create.S => epoll_create1.S} (55%)
 rename libc/arch-x86/syscalls/{epoll_create.S => epoll_create1.S} (81%)
 create mode 100644 libc/bionic/epoll_create.cpp
 create mode 100644 libc/include/ppoll.h
 create mode 100644 libc/include/sys/fcntl.h

diff --git a/libc/Android.mk b/libc/Android.mk
index 33d03c4..53b1add 100644
--- a/libc/Android.mk
+++ b/libc/Android.mk
@@ -151,6 +151,7 @@ libc_common_src_files := \
 	bionic/usleep.c \
 	bionic/utmp.c \
 	bionic/wcscoll.c \
+	bionic/epoll_create.cpp \
 	netbsd/gethnamaddr.c \
 	netbsd/inet/nsap_addr.c \
 	netbsd/resolv/__dn_comp.c \
diff --git a/libc/SYSCALLS.TXT b/libc/SYSCALLS.TXT
index 88c980f..ce6cb8a 100644
--- a/libc/SYSCALLS.TXT
+++ b/libc/SYSCALLS.TXT
@@ -305,7 +305,7 @@ long    perf_event_open(struct perf_event_attr *attr_uptr, pid_t pid, int cpu, i
 int	futex(void *, int, int, void *, void *, int) 1
 
 # epoll
-int     epoll_create(int size)     1
+int     epoll_create1(int size)     1
 int     epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)    1
 int     epoll_wait(int epfd, struct epoll_event *events, int max, int timeout)   1
 
diff --git a/libc/arch-arm/syscalls.mk b/libc/arch-arm/syscalls.mk
index 252a428..e17705b 100644
--- a/libc/arch-arm/syscalls.mk
+++ b/libc/arch-arm/syscalls.mk
@@ -196,7 +196,7 @@ syscall_src += arch-arm/syscalls/sysinfo.S
 syscall_src += arch-arm/syscalls/personality.S
 syscall_src += arch-arm/syscalls/perf_event_open.S
 syscall_src += arch-arm/syscalls/futex.S
-syscall_src += arch-arm/syscalls/epoll_create.S
+syscall_src += arch-arm/syscalls/epoll_create1.S
 syscall_src += arch-arm/syscalls/epoll_ctl.S
 syscall_src += arch-arm/syscalls/epoll_wait.S
 syscall_src += arch-arm/syscalls/inotify_init.S
diff --git a/libc/arch-arm/syscalls/epoll_create.S b/libc/arch-arm/syscalls/epoll_create1.S
similarity index 77%
rename from libc/arch-arm/syscalls/epoll_create.S
rename to libc/arch-arm/syscalls/epoll_create1.S
index b2894e6..d05451d 100644
--- a/libc/arch-arm/syscalls/epoll_create.S
+++ b/libc/arch-arm/syscalls/epoll_create1.S
@@ -3,13 +3,13 @@
 #include <linux/err.h>
 #include <machine/asm.h>
 
-ENTRY(epoll_create)
+ENTRY(epoll_create1)
     mov     ip, r7
-    ldr     r7, =__NR_epoll_create
+    ldr     r7, =__NR_epoll_create1
     swi     #0
     mov     r7, ip
     cmn     r0, #(MAX_ERRNO + 1)
     bxls    lr
     neg     r0, r0
     b       __set_errno
-END(epoll_create)
+END(epoll_create1)
diff --git a/libc/arch-mips/syscalls.mk b/libc/arch-mips/syscalls.mk
index 23393a2..994f114 100644
--- a/libc/arch-mips/syscalls.mk
+++ b/libc/arch-mips/syscalls.mk
@@ -199,7 +199,7 @@ syscall_src += arch-mips/syscalls/sysinfo.S
 syscall_src += arch-mips/syscalls/personality.S
 syscall_src += arch-mips/syscalls/perf_event_open.S
 syscall_src += arch-mips/syscalls/futex.S
-syscall_src += arch-mips/syscalls/epoll_create.S
+syscall_src += arch-mips/syscalls/epoll_create1.S
 syscall_src += arch-mips/syscalls/epoll_ctl.S
 syscall_src += arch-mips/syscalls/epoll_wait.S
 syscall_src += arch-mips/syscalls/inotify_init.S
diff --git a/libc/arch-mips/syscalls/epoll_create.S b/libc/arch-mips/syscalls/epoll_create1.S
similarity index 55%
rename from libc/arch-mips/syscalls/epoll_create.S
rename to libc/arch-mips/syscalls/epoll_create1.S
index 2f4ac7f..0abaeda 100644
--- a/libc/arch-mips/syscalls/epoll_create.S
+++ b/libc/arch-mips/syscalls/epoll_create1.S
@@ -1,14 +1,15 @@
-/* autogenerated by gensyscalls.py */
+/* Generated by gensyscalls.py. Do not edit. */
+
 #include <asm/unistd.h>
     .text
-    .globl epoll_create
+    .globl epoll_create1
     .align 4
-    .ent epoll_create
+    .ent epoll_create1
 
-epoll_create:
+epoll_create1:
     .set noreorder
     .cpload $t9
-    li $v0, __NR_epoll_create
+    li $v0, __NR_epoll_create1
     syscall
     bnez $a3, 1f
     move $a0, $v0
@@ -19,4 +20,4 @@ epoll_create:
     j $t9
     nop
     .set reorder
-    .end epoll_create
+    .end epoll_create1
diff --git a/libc/arch-x86/syscalls.mk b/libc/arch-x86/syscalls.mk
index 11573de..beb58bc 100644
--- a/libc/arch-x86/syscalls.mk
+++ b/libc/arch-x86/syscalls.mk
@@ -200,7 +200,7 @@ syscall_src += arch-x86/syscalls/sysinfo.S
 syscall_src += arch-x86/syscalls/personality.S
 syscall_src += arch-x86/syscalls/perf_event_open.S
 syscall_src += arch-x86/syscalls/futex.S
-syscall_src += arch-x86/syscalls/epoll_create.S
+syscall_src += arch-x86/syscalls/epoll_create1.S
 syscall_src += arch-x86/syscalls/epoll_ctl.S
 syscall_src += arch-x86/syscalls/epoll_wait.S
 syscall_src += arch-x86/syscalls/inotify_init.S
diff --git a/libc/arch-x86/syscalls/epoll_create.S b/libc/arch-x86/syscalls/epoll_create1.S
similarity index 81%
rename from libc/arch-x86/syscalls/epoll_create.S
rename to libc/arch-x86/syscalls/epoll_create1.S
index 061f173..5972d49 100644
--- a/libc/arch-x86/syscalls/epoll_create.S
+++ b/libc/arch-x86/syscalls/epoll_create1.S
@@ -3,10 +3,10 @@
 #include <machine/asm.h>
 #include <asm/unistd.h>
 
-ENTRY(epoll_create)
+ENTRY(epoll_create1)
     pushl   %ebx
     mov     8(%esp), %ebx
-    movl    $__NR_epoll_create, %eax
+    movl    $__NR_epoll_create1, %eax
     int     $0x80
     cmpl    $-MAX_ERRNO, %eax
     jb      1f
@@ -18,4 +18,4 @@ ENTRY(epoll_create)
 1:
     popl    %ebx
     ret
-END(epoll_create)
+END(epoll_create1)
diff --git a/libc/bionic/epoll_create.cpp b/libc/bionic/epoll_create.cpp
new file mode 100644
index 0000000..1dfafa8
--- /dev/null
+++ b/libc/bionic/epoll_create.cpp
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/epoll.h>
+
+int epoll_create(int /*obsolete_size*/) {
+  return epoll_create1(0);
+}
diff --git a/libc/include/ppoll.h b/libc/include/ppoll.h
new file mode 100644
index 0000000..7d09d44
--- /dev/null
+++ b/libc/include/ppoll.h
@@ -0,0 +1,16 @@
+#ifdef ppoll
+#undef ppoll
+#endif
+
+#define ppoll compat_ppoll
+
+static inline int compat_ppoll(struct pollfd *fds, nfds_t nfds,
+		const struct timespec *timeout, const sigset_t *sigmask)
+{
+	if (timeout == NULL)
+		return poll(fds, nfds, -1);
+	else if (timeout->tv_sec == 0)
+		return poll(fds, nfds, 500);
+	else
+		return poll(fds, nfds, timeout->tv_sec * 1000);
+}
diff --git a/libc/include/pthread.h b/libc/include/pthread.h
index 38d3400..1e91f23 100644
--- a/libc/include/pthread.h
+++ b/libc/include/pthread.h
@@ -138,6 +138,8 @@ int pthread_attr_getguardsize(pthread_attr_t const * attr, size_t * guard_size);
 int pthread_attr_setscope(pthread_attr_t *attr, int  scope);
 int pthread_attr_getscope(pthread_attr_t const *attr);
 
+int pthread_condattr_setclock(pthread_condattr_t *, clockid_t);
+
 int pthread_getattr_np(pthread_t thid, pthread_attr_t * attr);
 
 int pthread_create(pthread_t *thread, pthread_attr_t const * attr,
diff --git a/libc/include/sys/epoll.h b/libc/include/sys/epoll.h
index 38739aa..acaa195 100644
--- a/libc/include/sys/epoll.h
+++ b/libc/include/sys/epoll.h
@@ -51,6 +51,8 @@ __BEGIN_DECLS
 #define EPOLL_CTL_DEL    2
 #define EPOLL_CTL_MOD    3
 
+#define EPOLL_CLOEXEC O_CLOEXEC
+
 typedef union epoll_data 
 {
     void *ptr;
@@ -66,6 +68,7 @@ struct epoll_event
 };
 
 int epoll_create(int size);
+int epoll_create1(int flags);
 int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
 int epoll_wait(int epfd, struct epoll_event *events, int max, int timeout);
 
diff --git a/libc/include/sys/fcntl.h b/libc/include/sys/fcntl.h
new file mode 100644
index 0000000..3cb3d8a
--- /dev/null
+++ b/libc/include/sys/fcntl.h
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+#ifndef _FCNTL_H
+#define _FCNTL_H
+
+#include <sys/cdefs.h>
+#include <sys/types.h>
+#include <linux/fcntl.h>
+#include <unistd.h>  /* this is not required, but makes client code much happier */
+
+__BEGIN_DECLS
+
+#ifndef O_ASYNC
+#define O_ASYNC  FASYNC
+#endif
+
+#ifndef O_CLOEXEC
+#define O_CLOEXEC  02000000
+#endif
+
+extern int  open(const char*  path, int  mode, ...);
+extern int  openat(int fd, const char*  path, int  mode, ...);
+extern int  unlinkat(int dirfd, const char *pathname, int flags);
+extern int  fcntl(int   fd, int   command, ...);
+extern int  creat(const char*  path, mode_t  mode);
+
+#if defined(__BIONIC_FORTIFY) && !defined(__clang__)
+__errordecl(__creat_missing_mode, "called with O_CREAT, but missing mode");
+__errordecl(__creat_too_many_args, "too many arguments");
+extern int __open_real(const char *pathname, int flags, ...)
+    __asm__(__USER_LABEL_PREFIX__ "open");
+extern int __open_2(const char *, int);
+
+__BIONIC_FORTIFY_INLINE
+int open(const char *pathname, int flags, ...) {
+    if (__builtin_constant_p(flags)) {
+        if ((flags & O_CREAT) && __builtin_va_arg_pack_len() == 0) {
+            __creat_missing_mode();  // compile time error
+        }
+    }
+
+    if (__builtin_va_arg_pack_len() > 1) {
+        __creat_too_many_args();  // compile time error
+    }
+
+    if ((__builtin_va_arg_pack_len() == 0) && !__builtin_constant_p(flags)) {
+        return __open_2(pathname, flags);
+    }
+
+    return __open_real(pathname, flags, __builtin_va_arg_pack());
+}
+
+extern int __openat_2(int, const char *, int);
+extern int __openat_real(int dirfd, const char *pathname, int flags, ...)
+    __asm__(__USER_LABEL_PREFIX__ "openat");
+
+__BIONIC_FORTIFY_INLINE
+int openat(int dirfd, const char *pathname, int flags, ...) {
+    if (__builtin_constant_p(flags)) {
+        if ((flags & O_CREAT) && __builtin_va_arg_pack_len() == 0) {
+            __creat_missing_mode();  // compile time error
+        }
+    }
+
+    if (__builtin_va_arg_pack_len() > 1) {
+        __creat_too_many_args();  // compile time error
+    }
+
+    if ((__builtin_va_arg_pack_len() == 0) && !__builtin_constant_p(flags)) {
+        return __openat_2(dirfd, pathname, flags);
+    }
+
+    return __openat_real(dirfd, pathname, flags, __builtin_va_arg_pack());
+}
+
+#endif /* defined(__BIONIC_FORTIFY) && !defined(__clang__) */
+
+__END_DECLS
+
+#endif /* _FCNTL_H */
diff --git a/libc/include/sys/socket.h b/libc/include/sys/socket.h
index 17ba0a1..a27ccde 100644
--- a/libc/include/sys/socket.h
+++ b/libc/include/sys/socket.h
@@ -32,6 +32,7 @@
 #include <sys/types.h>
 #include <linux/socket.h>
 
+#include <asm/fcntl.h>
 #include <asm/socket.h>
 #include <linux/sockios.h>
 #include <linux/uio.h>
@@ -61,6 +62,9 @@ typedef int socklen_t;
 #define SOCK_PACKET      10
 #endif
 
+#define SOCK_CLOEXEC O_CLOEXEC
+#define SOCK_NONBLOCK O_NONBLOCK
+
 /* BIONIC: second argument to shutdown() */
 enum {
     SHUT_RD = 0,        /* no more receptions */
-- 
2.10.1

