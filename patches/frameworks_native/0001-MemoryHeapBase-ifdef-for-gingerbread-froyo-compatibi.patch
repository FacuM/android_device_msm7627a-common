From 9fa049db62dc0b90f5bea61847bd1e32d674a999 Mon Sep 17 00:00:00 2001
From: Tanguy Pruvot <tanguy.pruvot@gmail.com>
Date: Mon, 11 Mar 2013 05:20:37 +0100
Subject: [PATCH] MemoryHeapBase: ifdef for gingerbread/froyo compatibility

Allow to "revert" by a board config flag the offset member addon
see commit f24c4cd0f20 (aosp change id Ie618fb5c0718e)

This change is required to use overlay based proprietary camera libs
coming from gingerbread and froyo builds.

This change also requires a global cflag named BINDER_COMPAT
because a lot of modules use the MemoryHeap includes

Add this in your BoardConfig.mk :
COMMON_GLOBAL_CFLAGS += -DBINDER_COMPAT

Backported from /#/c/13317/

Change-Id: Ic8e18bc60a7310b0fa90ad251381e9f7d9e58d5e
---
 include/binder/IMemory.h        |  2 ++
 include/binder/MemoryHeapBase.h |  4 ++++
 libs/binder/Android.mk          |  4 ++++
 libs/binder/IMemory.cpp         | 22 +++++++++++++++++++++-
 libs/binder/MemoryHeapBase.cpp  | 25 ++++++++++++++++++++-----
 5 files changed, 51 insertions(+), 6 deletions(-)

diff --git a/include/binder/IMemory.h b/include/binder/IMemory.h
index 178ef8593..b29b38257 100644
--- a/include/binder/IMemory.h
+++ b/include/binder/IMemory.h
@@ -48,7 +48,9 @@ public:
     virtual void*       getBase() const = 0;
     virtual size_t      getSize() const = 0;
     virtual uint32_t    getFlags() const = 0;
+#ifndef BINDER_COMPAT
     virtual uint32_t    getOffset() const = 0;
+#endif
 
     // these are there just for backward source compatibility
     int32_t heapID() const { return getHeapID(); }
diff --git a/include/binder/MemoryHeapBase.h b/include/binder/MemoryHeapBase.h
index ea9b66c49..4c231ea7f 100644
--- a/include/binder/MemoryHeapBase.h
+++ b/include/binder/MemoryHeapBase.h
@@ -64,7 +64,9 @@ public:
 
     virtual size_t      getSize() const;
     virtual uint32_t    getFlags() const;
+#ifndef BINDER_COMPAT
     virtual uint32_t    getOffset() const;
+#endif
 
     const char*         getDevice() const;
 
@@ -94,7 +96,9 @@ private:
     uint32_t    mFlags;
     const char* mDevice;
     bool        mNeedUnmap;
+#ifndef BINDER_COMPAT
     uint32_t    mOffset;
+#endif
 };
 
 // ---------------------------------------------------------------------------
diff --git a/libs/binder/Android.mk b/libs/binder/Android.mk
index b12eda8e9..3fe8b1f37 100644
--- a/libs/binder/Android.mk
+++ b/libs/binder/Android.mk
@@ -45,6 +45,10 @@ endif
 
 LOCAL_PATH:= $(call my-dir)
 
+# Note about gingerbread compatibility : Require a global cflag,
+# several projects use binder's IMemory.h and MemoryHeapBase.h
+# COMMON_GLOBAL_CFLAGS += -DBINDER_COMPAT
+
 include $(CLEAR_VARS)
 
 ifeq ($(BOARD_NEEDS_MEMORYHEAPION),true)
diff --git a/libs/binder/IMemory.cpp b/libs/binder/IMemory.cpp
index f59867a45..cb320fa79 100644
--- a/libs/binder/IMemory.cpp
+++ b/libs/binder/IMemory.cpp
@@ -86,7 +86,9 @@ public:
     virtual void* getBase() const;
     virtual size_t getSize() const;
     virtual uint32_t getFlags() const;
+#ifndef BINDER_COMPAT
     virtual uint32_t getOffset() const;
+#endif
 
 private:
     friend class IMemory;
@@ -113,7 +115,9 @@ private:
     mutable void*       mBase;
     mutable size_t      mSize;
     mutable uint32_t    mFlags;
+#ifndef BINDER_COMPAT
     mutable uint32_t    mOffset;
+#endif
     mutable bool        mRealHeap;
     mutable Mutex       mLock;
 };
@@ -247,7 +251,11 @@ status_t BnMemory::onTransact(
 
 BpMemoryHeap::BpMemoryHeap(const sp<IBinder>& impl)
     : BpInterface<IMemoryHeap>(impl),
-        mHeapId(-1), mBase(MAP_FAILED), mSize(0), mFlags(0), mOffset(0), mRealHeap(false)
+        mHeapId(-1), mBase(MAP_FAILED), mSize(0), mFlags(0),
+#ifndef BINDER_COMPAT
+        mOffset(0),
+#endif
+        mRealHeap(false)
 {
 }
 
@@ -286,7 +294,9 @@ void BpMemoryHeap::assertMapped() const
             if (mHeapId == -1) {
                 mBase   = heap->mBase;
                 mSize   = heap->mSize;
+#ifndef BINDER_COMPAT
                 mOffset = heap->mOffset;
+#endif
                 android_atomic_write( dup( heap->mHeapId ), &mHeapId );
             }
         } else {
@@ -310,7 +320,11 @@ void BpMemoryHeap::assertReallyMapped() const
         int parcel_fd = reply.readFileDescriptor();
         ssize_t size = reply.readInt32();
         uint32_t flags = reply.readInt32();
+#ifndef BINDER_COMPAT
         uint32_t offset = reply.readInt32();
+#else
+        uint32_t offset = 0;
+#endif
 
         ALOGE_IF(err, "binder=%p transaction failed fd=%d, size=%zd, err=%d (%s)",
                 IInterface::asBinder(this).get(),
@@ -353,7 +367,9 @@ void BpMemoryHeap::assertReallyMapped() const
             } else {
                 mSize = size;
                 mFlags = flags;
+#ifndef BINDER_COMPAT
                 mOffset = offset;
+#endif
                 android_atomic_write(fd, &mHeapId);
             }
         }
@@ -386,10 +402,12 @@ uint32_t BpMemoryHeap::getFlags() const {
     return mFlags;
 }
 
+#ifndef BINDER_COMPAT
 uint32_t BpMemoryHeap::getOffset() const {
     assertMapped();
     return mOffset;
 }
+#endif
 
 // ---------------------------------------------------------------------------
 
@@ -410,7 +428,9 @@ status_t BnMemoryHeap::onTransact(
             reply->writeFileDescriptor(getHeapID());
             reply->writeInt32(getSize());
             reply->writeInt32(getFlags());
+#ifndef BINDER_COMPAT
             reply->writeInt32(getOffset());
+#endif
             return NO_ERROR;
         } break;
         default:
diff --git a/libs/binder/MemoryHeapBase.cpp b/libs/binder/MemoryHeapBase.cpp
index 43a01e472..31abdb45c 100644
--- a/libs/binder/MemoryHeapBase.cpp
+++ b/libs/binder/MemoryHeapBase.cpp
@@ -37,13 +37,19 @@ namespace android {
 
 MemoryHeapBase::MemoryHeapBase()
     : mFD(-1), mSize(0), mBase(MAP_FAILED),
-      mDevice(NULL), mNeedUnmap(false), mOffset(0)
+      mDevice(NULL), mNeedUnmap(false)
+#ifndef BINDER_COMPAT
+    , mOffset(0)
+#endif
 {
 }
 
 MemoryHeapBase::MemoryHeapBase(size_t size, uint32_t flags, char const * name)
     : mFD(-1), mSize(0), mBase(MAP_FAILED), mFlags(flags),
-      mDevice(0), mNeedUnmap(false), mOffset(0)
+      mDevice(0), mNeedUnmap(false)
+#ifndef BINDER_COMPAT
+    , mOffset(0)
+#endif
 {
     const size_t pagesize = getpagesize();
     size = ((size + pagesize-1) & ~(pagesize-1));
@@ -60,7 +66,10 @@ MemoryHeapBase::MemoryHeapBase(size_t size, uint32_t flags, char const * name)
 
 MemoryHeapBase::MemoryHeapBase(const char* device, size_t size, uint32_t flags)
     : mFD(-1), mSize(0), mBase(MAP_FAILED), mFlags(flags),
-      mDevice(0), mNeedUnmap(false), mOffset(0)
+      mDevice(0), mNeedUnmap(false)
+#ifndef BINDER_COMPAT
+    , mOffset(0)
+#endif
 {
     int open_flags = O_RDWR;
     if (flags & NO_CACHING)
@@ -79,7 +88,10 @@ MemoryHeapBase::MemoryHeapBase(const char* device, size_t size, uint32_t flags)
 
 MemoryHeapBase::MemoryHeapBase(int fd, size_t size, uint32_t flags, uint32_t offset)
     : mFD(-1), mSize(0), mBase(MAP_FAILED), mFlags(flags),
-      mDevice(0), mNeedUnmap(false), mOffset(0)
+      mDevice(0), mNeedUnmap(false)
+#ifndef BINDER_COMPAT
+    , mOffset(0)
+#endif
 {
     const size_t pagesize = getpagesize();
     size = ((size + pagesize-1) & ~(pagesize-1));
@@ -127,7 +139,9 @@ status_t MemoryHeapBase::mapfd(int fd, size_t size, uint32_t offset)
     }
     mFD = fd;
     mSize = size;
+#ifndef BINDER_COMPAT
     mOffset = offset;
+#endif
     return NO_ERROR;
 }
 
@@ -169,10 +183,11 @@ uint32_t MemoryHeapBase::getFlags() const {
 const char* MemoryHeapBase::getDevice() const {
     return mDevice;
 }
-
+#ifndef BINDER_COMPAT
 uint32_t MemoryHeapBase::getOffset() const {
     return mOffset;
 }
+#endif
 
 // ---------------------------------------------------------------------------
 }; // namespace android
-- 
2.11.0

